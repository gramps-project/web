{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gramps Web: research & organize your family tree together Gramps Web is a web app for collaborative genealogy. It is based on and interoperable with Gramps , the leading open source genealogy desktop application. Gramps Web is open source software and puts your privacy and your control of your research data first. Main features Browse all objects in your family tree: people, families, events, places, repositories, sources, citations, media objects, and notes Two different interactive pedigree views Display all places on an interactive map Blog section with blog articles stored in Gramps Switch the language of the interface between any of 40 languages Multi-user system with different levels of permissions Edit all objects collaboratively and add new objects Fully responsive & mobile friendly Export the tree as Gramps XML or GEDCOM from the web interface Import a tree (in Gramps XML or GEDCOM format) Synchronize with your local Gramps database and use Gramps desktop in parallel Planned features Generate any report supported by Gramps from the web interface Tag people in photos with automatic face detection","title":"Introduction"},{"location":"#gramps-web-research-organize-your-family-tree-together","text":"Gramps Web is a web app for collaborative genealogy. It is based on and interoperable with Gramps , the leading open source genealogy desktop application. Gramps Web is open source software and puts your privacy and your control of your research data first.","title":"Gramps Web: research &amp; organize your family tree together"},{"location":"#main-features","text":"Browse all objects in your family tree: people, families, events, places, repositories, sources, citations, media objects, and notes Two different interactive pedigree views Display all places on an interactive map Blog section with blog articles stored in Gramps Switch the language of the interface between any of 40 languages Multi-user system with different levels of permissions Edit all objects collaboratively and add new objects Fully responsive & mobile friendly Export the tree as Gramps XML or GEDCOM from the web interface Import a tree (in Gramps XML or GEDCOM format) Synchronize with your local Gramps database and use Gramps desktop in parallel","title":"Main features"},{"location":"#planned-features","text":"Generate any report supported by Gramps from the web interface Tag people in photos with automatic face detection","title":"Planned features"},{"location":"Configuration/","text":"Server Configuration Using the default Docker image, all necessary configuration can be made from the browser. However, depending on the deployment, it can be necessary to customize the server configuration. This page lists all methods to change the configuration and all existing configuration options. Configuration file A configuration file is not mandatory as most settings can also be provided as environment variables. The basic setup shown in the Deployment docs works without one. When you use the Docker Compose based setup , you can include a configuration file by adding the following list item under the volumes: key in the grampsweb: block: - /path/to/config.cfg:/app/config/config.cfg where /path/to/config.cfg is the path to the config file in your server's file system (the right-hand side refers to the path in the container and must not be changed). Existing configuration settings The following configuration options exist. The last column indicates whether the option can be set from an environment variable. Required settings Key Description Set from environment TREE The name of the family tree database to use. Show available trees with gramps -l yes SECRET_KEY The secret key for flask. This must be set for use in production. The secret must not be shared publicly. Changing it will invalidate all access tokens yes Info You can generate a secure secret key e.g. with the command python3 -c \"import secrets;print(secrets.token_urlsafe(32))\" Optional settings Key Description Set from environment MEDIA_BASE_DIR Path to use as base directory for media files, overriding the media base directory set in Gramps yes SEARCH_INDEX_DIR Path for the full-text search index. Defaults to indexdir relative to the path where the script is run yes STATIC_PATH Path to serve static files from (e.g. a static web frontend) yes BASE_URL Base URL where the API can be reached (e.g. https://mygramps.mydomain.com/ ). This is necessary e.g. to build correct passwort reset links yes CORS_ORIGINS Origins where CORS requests are allowed from. By default, all are disallowed. Use \"*\" to allow requests from any domain. no EMAIL_HOST SMTP server host (e.g. for sending password reset e-mails) yes EMAIL_PORT SMTP server port. defaults to 465 yes EMAIL_HOST_USER SMTP server username yes EMAIL_HOST_PASSWORD SMTP server password yes EMAIL_USE_TLS Boolean, whether to use TLS for sending e-mails. Defaults to true no DEFAULT_FROM_EMAIL \"From\" address for automated e-mails yes THUMBNAIL_CACHE_CONFIG Dictionary with settings for the thumbnail cache. See Flask-Caching for possible settings. no Settings only for PostgreSQL backend database This is required if you've configured your Gramps database to work with the PostgreSQL addon . Key Description Set from environment POSTGRES_USER The user name for the database connection yes POSTGRES_PASSWORD The password for the database user yes Settings only during development Key Description Set from environment DISABLE_AUTH If True , disable the authentication system. Warning: never use this in a production environment, as it will allow read and write access from the public! no Example configuration file A minimal configuration file for production could look like this: TREE = \"My Family Tree\" BASE_URL = \"https://mytree.example.com\" SECRET_KEY = \"...\" # your secret key USER_DB_URI = \"sqlite:////path/to/users.sqlite\" EMAIL_HOST = \"mail.example.com\" EMAIL_PORT = 465 EMAIL_USE_TLS = True EMAIL_HOST_USER = \"gramps@example.com\" EMAIL_HOST_PASSWORD = \"...\" # your SMPT password DEFAULT_FROM_EMAIL = \"gramps@example.com\"","title":"Server Configuration"},{"location":"Configuration/#server-configuration","text":"Using the default Docker image, all necessary configuration can be made from the browser. However, depending on the deployment, it can be necessary to customize the server configuration. This page lists all methods to change the configuration and all existing configuration options.","title":"Server Configuration"},{"location":"Configuration/#configuration-file","text":"A configuration file is not mandatory as most settings can also be provided as environment variables. The basic setup shown in the Deployment docs works without one. When you use the Docker Compose based setup , you can include a configuration file by adding the following list item under the volumes: key in the grampsweb: block: - /path/to/config.cfg:/app/config/config.cfg where /path/to/config.cfg is the path to the config file in your server's file system (the right-hand side refers to the path in the container and must not be changed).","title":"Configuration file"},{"location":"Configuration/#existing-configuration-settings","text":"The following configuration options exist. The last column indicates whether the option can be set from an environment variable.","title":"Existing configuration settings"},{"location":"Configuration/#required-settings","text":"Key Description Set from environment TREE The name of the family tree database to use. Show available trees with gramps -l yes SECRET_KEY The secret key for flask. This must be set for use in production. The secret must not be shared publicly. Changing it will invalidate all access tokens yes Info You can generate a secure secret key e.g. with the command python3 -c \"import secrets;print(secrets.token_urlsafe(32))\"","title":"Required settings"},{"location":"Configuration/#optional-settings","text":"Key Description Set from environment MEDIA_BASE_DIR Path to use as base directory for media files, overriding the media base directory set in Gramps yes SEARCH_INDEX_DIR Path for the full-text search index. Defaults to indexdir relative to the path where the script is run yes STATIC_PATH Path to serve static files from (e.g. a static web frontend) yes BASE_URL Base URL where the API can be reached (e.g. https://mygramps.mydomain.com/ ). This is necessary e.g. to build correct passwort reset links yes CORS_ORIGINS Origins where CORS requests are allowed from. By default, all are disallowed. Use \"*\" to allow requests from any domain. no EMAIL_HOST SMTP server host (e.g. for sending password reset e-mails) yes EMAIL_PORT SMTP server port. defaults to 465 yes EMAIL_HOST_USER SMTP server username yes EMAIL_HOST_PASSWORD SMTP server password yes EMAIL_USE_TLS Boolean, whether to use TLS for sending e-mails. Defaults to true no DEFAULT_FROM_EMAIL \"From\" address for automated e-mails yes THUMBNAIL_CACHE_CONFIG Dictionary with settings for the thumbnail cache. See Flask-Caching for possible settings. no","title":"Optional settings"},{"location":"Configuration/#settings-only-for-postgresql-backend-database","text":"This is required if you've configured your Gramps database to work with the PostgreSQL addon . Key Description Set from environment POSTGRES_USER The user name for the database connection yes POSTGRES_PASSWORD The password for the database user yes","title":"Settings only for PostgreSQL backend database"},{"location":"Configuration/#settings-only-during-development","text":"Key Description Set from environment DISABLE_AUTH If True , disable the authentication system. Warning: never use this in a production environment, as it will allow read and write access from the public! no","title":"Settings only during development"},{"location":"Configuration/#example-configuration-file","text":"A minimal configuration file for production could look like this: TREE = \"My Family Tree\" BASE_URL = \"https://mytree.example.com\" SECRET_KEY = \"...\" # your secret key USER_DB_URI = \"sqlite:////path/to/users.sqlite\" EMAIL_HOST = \"mail.example.com\" EMAIL_PORT = 465 EMAIL_USE_TLS = True EMAIL_HOST_USER = \"gramps@example.com\" EMAIL_HOST_PASSWORD = \"...\" # your SMPT password DEFAULT_FROM_EMAIL = \"gramps@example.com\"","title":"Example configuration file"},{"location":"Deployment/","text":"Deploying Gramps Web with Docker The most convenient option to host Gramps Web is with Docker Compose. We will assume that Docker and Docker Compose are already installed in your system. Your can use Windows, Mac OS, or Linux as a host system. The supported architectures include not only x86-64 (desktop systems), but also ARM systems such as a Raspberry Pi, which can serve as a low-cost, but powerful (enough) web server. Note You do not need to install Gramps on the server as it is contained in the docker image. Step 1: Docker configuration Create a new file on the server named docker-compose.yml and insert the following contents: version : \"3.7\" services : grampsweb : image : ghcr.io/gramps-project/grampsweb:latest restart : always ports : - \"80:5000\" # host:docker volumes : - gramps_users:/app/users # persist user database - gramps_index:/app/indexdir # persist search index - gramps_thumb_cache:/app/thumbnail_cache # persist thumbnails - gramps_secret:/app/secret/secret # persist flask secret - gramps_db:/root/.gramps/grampsdb # persist Gramps database - gramps_media:/app/media # persist media files volumes : gramps_users : gramps_index : gramps_thumb_cache : gramps_secret : gramps_db : gramps_media : This will generate six named volumes to make sure that all relevant data will persist when restarting the container. Warning The above will make the API available on port 80 of the host machine without SSL/TLS protection . You can use this for local testing, but do not expose this directly to the internet, it is completely insecure! Step 2: Secure access with SSL/TLS The web API must be served to the public internet over HTTPS. There are several options, e.g. Using docker hosting that includes SSL/TLS automatically Using an Nginx Reverse Proxy with a Let's Encrypt certificate See Docker with Let's Encrypt for how to set up the former. If you plan to use Gramps Web only on your local network, you can skip this step. Step 3: Start the server Run docker-compose up -d On first run, the app will display a first-run wizard that will allow you to Create and account for the owner (admin) user Set some necessary configuration options Import a family tree in Gramps XML ( .gramps ) format Step 4: Upload media files There are several options for uploading media files. When using files stored on the same server as Gramps Web, you can mount a directory into the Docker container instead of using a named volume, i.e. /home/server_user/gramps_media/:/app/media instead of gramps_media:/app/media , and upload your media files there. When using media files hosted on S3 , you can use he S3 Media Uploader Addon The arguably most convenient option is to use Gramps Web Sync .","title":"Deployment"},{"location":"Deployment/#deploying-gramps-web-with-docker","text":"The most convenient option to host Gramps Web is with Docker Compose. We will assume that Docker and Docker Compose are already installed in your system. Your can use Windows, Mac OS, or Linux as a host system. The supported architectures include not only x86-64 (desktop systems), but also ARM systems such as a Raspberry Pi, which can serve as a low-cost, but powerful (enough) web server. Note You do not need to install Gramps on the server as it is contained in the docker image.","title":"Deploying Gramps Web with Docker"},{"location":"Deployment/#step-1-docker-configuration","text":"Create a new file on the server named docker-compose.yml and insert the following contents: version : \"3.7\" services : grampsweb : image : ghcr.io/gramps-project/grampsweb:latest restart : always ports : - \"80:5000\" # host:docker volumes : - gramps_users:/app/users # persist user database - gramps_index:/app/indexdir # persist search index - gramps_thumb_cache:/app/thumbnail_cache # persist thumbnails - gramps_secret:/app/secret/secret # persist flask secret - gramps_db:/root/.gramps/grampsdb # persist Gramps database - gramps_media:/app/media # persist media files volumes : gramps_users : gramps_index : gramps_thumb_cache : gramps_secret : gramps_db : gramps_media : This will generate six named volumes to make sure that all relevant data will persist when restarting the container. Warning The above will make the API available on port 80 of the host machine without SSL/TLS protection . You can use this for local testing, but do not expose this directly to the internet, it is completely insecure!","title":"Step 1: Docker configuration"},{"location":"Deployment/#step-2-secure-access-with-ssltls","text":"The web API must be served to the public internet over HTTPS. There are several options, e.g. Using docker hosting that includes SSL/TLS automatically Using an Nginx Reverse Proxy with a Let's Encrypt certificate See Docker with Let's Encrypt for how to set up the former. If you plan to use Gramps Web only on your local network, you can skip this step.","title":"Step 2: Secure access with SSL/TLS"},{"location":"Deployment/#step-3-start-the-server","text":"Run docker-compose up -d On first run, the app will display a first-run wizard that will allow you to Create and account for the owner (admin) user Set some necessary configuration options Import a family tree in Gramps XML ( .gramps ) format","title":"Step 3: Start the server"},{"location":"Deployment/#step-4-upload-media-files","text":"There are several options for uploading media files. When using files stored on the same server as Gramps Web, you can mount a directory into the Docker container instead of using a named volume, i.e. /home/server_user/gramps_media/:/app/media instead of gramps_media:/app/media , and upload your media files there. When using media files hosted on S3 , you can use he S3 Media Uploader Addon The arguably most convenient option is to use Gramps Web Sync .","title":"Step 4: Upload media files"},{"location":"LetsEncrypt/","text":"Setting up HTTPS with Let's Encrypt and Docker Compose When served to the public internet, Gramps Web must use HTTPS encryption. A particularly convenient option is to use a dockerized Nginx reverse proxy with automated Let's Encrypt certificate generation. This is achieved with the following docker-compose.yml : version : \"3.7\" services : grampsweb : image : ghcr.io/gramps-project/grampsweb:latest restart : always environment : VIRTUAL_PORT : \"5000\" VIRTUAL_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_EMAIL : ... # your email volumes : - gramps_users:/app/users - gramps_index:/app/indexdir - gramps_thumb_cache:/app/thumbnail_cache - gramps_secret:/app/secret/secret - gramps_db:/root/.gramps/grampsdb - gramps_media:/app/media networks : - proxy-tier - default proxy : image : nginxproxy/nginx-proxy restart : always ports : - 80:80 - 443:443 environment : ENABLE_IPV6 : \"true\" volumes : - conf:/etc/nginx/conf.d - dhparam:/etc/nginx/dhparam - certs:/etc/nginx/certs:ro - vhost.d:/etc/nginx/vhost.d - html:/usr/share/nginx/html - /var/run/docker.sock:/tmp/docker.sock:ro networks : - proxy-tier acme-companion : image : nginxproxy/acme-companion container_name : nginx-proxy-acme restart : always volumes_from : - proxy volumes : - certs:/etc/nginx/certs:rw - acme:/etc/acme.sh - /var/run/docker.sock:/var/run/docker.sock:ro networks : - proxy-tier depends_on : - proxy volumes : acme : certs : conf : dhparam : vhost.d : html : gramps_users : gramps_index : gramps_thumb_cache : gramps_secret : gramps_db : gramps_media : networks : proxy-tier : Please see the acme-companion docs for how to set up your domain.","title":"Docker with Let's Encrypt"},{"location":"LetsEncrypt/#setting-up-https-with-lets-encrypt-and-docker-compose","text":"When served to the public internet, Gramps Web must use HTTPS encryption. A particularly convenient option is to use a dockerized Nginx reverse proxy with automated Let's Encrypt certificate generation. This is achieved with the following docker-compose.yml : version : \"3.7\" services : grampsweb : image : ghcr.io/gramps-project/grampsweb:latest restart : always environment : VIRTUAL_PORT : \"5000\" VIRTUAL_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_HOST : ... # e.g. gramps.mydomain.com LETSENCRYPT_EMAIL : ... # your email volumes : - gramps_users:/app/users - gramps_index:/app/indexdir - gramps_thumb_cache:/app/thumbnail_cache - gramps_secret:/app/secret/secret - gramps_db:/root/.gramps/grampsdb - gramps_media:/app/media networks : - proxy-tier - default proxy : image : nginxproxy/nginx-proxy restart : always ports : - 80:80 - 443:443 environment : ENABLE_IPV6 : \"true\" volumes : - conf:/etc/nginx/conf.d - dhparam:/etc/nginx/dhparam - certs:/etc/nginx/certs:ro - vhost.d:/etc/nginx/vhost.d - html:/usr/share/nginx/html - /var/run/docker.sock:/tmp/docker.sock:ro networks : - proxy-tier acme-companion : image : nginxproxy/acme-companion container_name : nginx-proxy-acme restart : always volumes_from : - proxy volumes : - certs:/etc/nginx/certs:rw - acme:/etc/acme.sh - /var/run/docker.sock:/var/run/docker.sock:ro networks : - proxy-tier depends_on : - proxy volumes : acme : certs : conf : dhparam : vhost.d : html : gramps_users : gramps_index : gramps_thumb_cache : gramps_secret : gramps_db : gramps_media : networks : proxy-tier : Please see the acme-companion docs for how to set up your domain.","title":"Setting up HTTPS with Let's Encrypt and Docker Compose"},{"location":"Postgres/","text":"Using a PostgreSQL database By default, Gramps uses a file-based SQLite database to store the family tree. This works perfectly fine for Gramps Web and is recommended for most users. However, starting with Gramps Web API version 0.3.0, also a PostgreSQL server with a single family tree per database is supported, powered by the Gramps PostgreSQL Addon . Setting up the PostgreSQL server You can follow the instructions in the Gramps Wiki to set up the PostgreSQL server. Alternatively, you can also use Docker Compose to run the PostgreSQL server in a container on the same docker host as Gramps Web. Using a dockerized PostgreSQL with Gramps is only complicated by the fact the the default PostgreSQL images do not have any locales installed, which are however needed by Gramps for localized collation of objects. Thus, it is necessary to use a custom Dockerfile. Create a Dockerfile with the following contens in a directory postgres next to your docker-compose.yml : FROM postgres:14 RUN apt-get update && apt-get install -y locales-all \\ && rm -rf /var/lib/apt/lists/* Next, add the following section to your docker-compose.yml : postgres_gramps : build : ./postgres restart : unless-stopped environment : POSTGRES_PASSWORD : your_postgres_password POSTGRES_USER : postgres volumes : - postgres_data:/var/lib/postgresql/data and also add postgres_data: as key under the volumes: section of this YAML file. Importing a Gramps family tree Again, if you have set up the PostgreSQL server yourself, you can follow the instructions in the Gramps Wiki to import a family tree into the database. Alternatively, if you have followed the Docker Compose instructions above, you can use the following command to import a Gramps XML file located on your docker host: docker-compose run --entrypoint \"\" grampsweb \\ gramps -C postgres \\ -i /root/.gramps/grampsdb/my_tree.gramps \\ --config = database.backend:postgresql \\ --config = database.host:postgres_gramps \\ --config = database.port:5432 \\ --username = postgres --password = your_postgres_password Configuring Web API for use with the database To configure Web API for use with the PostgreSQL database, add the following under the environment: key of the grampsweb service in docker-compose.yml : # the PostgreSQL addon assumes the tree name to be # equal to the database name and here the default # database name of the PostgreSQL image is used TREE : postgres # The credentials must agree with the ones used for # the PostgreSQL container POSTGRES_USER : postgres POSTGRES_PASSWORD : your_postgres_password Issues In case of issues, please monitor the log output of Gramps Web and the PostgreSQL server. In the case of docker, this is achieved with docker-compose logs grampsweb docker-compose logs postgres_grampsweb If you suspect there is an issue with Gramps Web (or the documentation), please file an issue on Github .","title":"Using PostgreSQL"},{"location":"Postgres/#using-a-postgresql-database","text":"By default, Gramps uses a file-based SQLite database to store the family tree. This works perfectly fine for Gramps Web and is recommended for most users. However, starting with Gramps Web API version 0.3.0, also a PostgreSQL server with a single family tree per database is supported, powered by the Gramps PostgreSQL Addon .","title":"Using a PostgreSQL database"},{"location":"Postgres/#setting-up-the-postgresql-server","text":"You can follow the instructions in the Gramps Wiki to set up the PostgreSQL server. Alternatively, you can also use Docker Compose to run the PostgreSQL server in a container on the same docker host as Gramps Web. Using a dockerized PostgreSQL with Gramps is only complicated by the fact the the default PostgreSQL images do not have any locales installed, which are however needed by Gramps for localized collation of objects. Thus, it is necessary to use a custom Dockerfile. Create a Dockerfile with the following contens in a directory postgres next to your docker-compose.yml : FROM postgres:14 RUN apt-get update && apt-get install -y locales-all \\ && rm -rf /var/lib/apt/lists/* Next, add the following section to your docker-compose.yml : postgres_gramps : build : ./postgres restart : unless-stopped environment : POSTGRES_PASSWORD : your_postgres_password POSTGRES_USER : postgres volumes : - postgres_data:/var/lib/postgresql/data and also add postgres_data: as key under the volumes: section of this YAML file.","title":"Setting up the PostgreSQL server"},{"location":"Postgres/#importing-a-gramps-family-tree","text":"Again, if you have set up the PostgreSQL server yourself, you can follow the instructions in the Gramps Wiki to import a family tree into the database. Alternatively, if you have followed the Docker Compose instructions above, you can use the following command to import a Gramps XML file located on your docker host: docker-compose run --entrypoint \"\" grampsweb \\ gramps -C postgres \\ -i /root/.gramps/grampsdb/my_tree.gramps \\ --config = database.backend:postgresql \\ --config = database.host:postgres_gramps \\ --config = database.port:5432 \\ --username = postgres --password = your_postgres_password","title":"Importing a Gramps family tree"},{"location":"Postgres/#configuring-web-api-for-use-with-the-database","text":"To configure Web API for use with the PostgreSQL database, add the following under the environment: key of the grampsweb service in docker-compose.yml : # the PostgreSQL addon assumes the tree name to be # equal to the database name and here the default # database name of the PostgreSQL image is used TREE : postgres # The credentials must agree with the ones used for # the PostgreSQL container POSTGRES_USER : postgres POSTGRES_PASSWORD : your_postgres_password","title":"Configuring Web API for use with the database"},{"location":"Postgres/#issues","text":"In case of issues, please monitor the log output of Gramps Web and the PostgreSQL server. In the case of docker, this is achieved with docker-compose logs grampsweb docker-compose logs postgres_grampsweb If you suspect there is an issue with Gramps Web (or the documentation), please file an issue on Github .","title":"Issues"},{"location":"Users/","text":"User system Gramps Web is not meant to be exposed to the internet for public access, but only by authenticated users. User accounts can be created by the site owner via the command line or web interface, or by self-registration and subsequent approval by the site owner. User roles The following user roles are currently defined. Role Role ID Permissions Guest 0 View non-private objects Member 1 Guest + view private objects Contributor* 2 Member + add objects Editor 3 Contributor + edit and delete objects Owner 4 All: Editor + manage users * Note that the \"Contributor\" role is currently only partially supported; e.g., family objects cannot be added since they imply a modification of the underlying Gramps person objects of family members. It is recommended to use the other roles whenever possible. Managing users There are two ways to manage users: With owner permissions using the web interface On the command line on the server The owner account required to first access the web app can be added in the onboarding wizard that is automatically launched when accessing Gramps Web with an empty user database. Managing users on the command line When using Docker Compose , the basic command is docker-compose run grampsweb python3 -m gramps_webapi user COMMAND [ ARGS ] The COMMAND can be add or delete . Use --help for [ARGS] to show the syntax and possible configuration options.","title":"User system"},{"location":"Users/#user-system","text":"Gramps Web is not meant to be exposed to the internet for public access, but only by authenticated users. User accounts can be created by the site owner via the command line or web interface, or by self-registration and subsequent approval by the site owner.","title":"User system"},{"location":"Users/#user-roles","text":"The following user roles are currently defined. Role Role ID Permissions Guest 0 View non-private objects Member 1 Guest + view private objects Contributor* 2 Member + add objects Editor 3 Contributor + edit and delete objects Owner 4 All: Editor + manage users * Note that the \"Contributor\" role is currently only partially supported; e.g., family objects cannot be added since they imply a modification of the underlying Gramps person objects of family members. It is recommended to use the other roles whenever possible.","title":"User roles"},{"location":"Users/#managing-users","text":"There are two ways to manage users: With owner permissions using the web interface On the command line on the server The owner account required to first access the web app can be added in the onboarding wizard that is automatically launched when accessing Gramps Web with an empty user database.","title":"Managing users"},{"location":"Users/#managing-users-on-the-command-line","text":"When using Docker Compose , the basic command is docker-compose run grampsweb python3 -m gramps_webapi user COMMAND [ ARGS ] The COMMAND can be add or delete . Use --help for [ARGS] to show the syntax and possible configuration options.","title":"Managing users on the command line"},{"location":"requirements/","text":"Setup Requirements Gramps Web is a web app that runs on a server and is accessed via the web browser. It is meant to be made accessible to authenticated users via the internet. Server Requirements The most convenient way to host Gramps Web is via Docker Compose. While this is not possible with ordinary \"shared hosting\" providers, this makes it possible to host the app on Linux, Mac, or Windows; it can be hosted on a virtual server or on a Raspberry Pi (we provide Docker images for the ARM architecture) in your basement. Apart from Docker, you will also need some storage space to store your media files (images, documents). Finally, Gramps Web is only secure when served via HTTPS, so you will require an SSL/TLS certificate. The docs below show how to get one automatically for free from Let's Encrypt.","title":"Requirements"},{"location":"requirements/#setup-requirements","text":"Gramps Web is a web app that runs on a server and is accessed via the web browser. It is meant to be made accessible to authenticated users via the internet.","title":"Setup Requirements"},{"location":"requirements/#server-requirements","text":"The most convenient way to host Gramps Web is via Docker Compose. While this is not possible with ordinary \"shared hosting\" providers, this makes it possible to host the app on Linux, Mac, or Windows; it can be hosted on a virtual server or on a Raspberry Pi (we provide Docker images for the ARM architecture) in your basement. Apart from Docker, you will also need some storage space to store your media files (images, documents). Finally, Gramps Web is only secure when served via HTTPS, so you will require an SSL/TLS certificate. The docs below show how to get one automatically for free from Let's Encrypt.","title":"Server Requirements"},{"location":"s3/","text":"Hosting media files on S3 Instead of hosting the media files of the family tree on the same server as the Gramps database, they can also be hosted on Amazon S3 or a different API-compatible object storage service. This strongly reduces storage and traffic requirements for the Gramps Web server. Preparing credentials In your AWS (or other object storage service) account, get an access key ID and secret access key (you may first want to create a separate user with a security policy allowing only access to S3). Upload media files To upload your existing media files to S3, on Linux you can use a local Gramps installation with the S3 Media Uploader Addon, that you can install directly from Gramps desktop. However, some additional configuration is necessary. The addon uses the boto3 Python library under the hood. You need to install it first with python3 -m pip install boto3 On the command line, export the access key ID and secret key to the appropriate environment variables: export AWS_ACCESS_KEY_ID = my_access_key_id export AWS_SECRET_ACCESS_KEY = my_secret_access_key Now, you can start the uploader by runing the following command, gramps -O \"My Family Tree\" -a tool \\ -p \"name=s3uploader,bucket_name=my_bucket_name\" replacing \"My Family Tree\" with the name of your family tree and my_bucket_name with the complete name of your S3 bucket. You will need a dedicated S3 bucket for your Gramps Web instance. If the bucket does not exist yet, the S3 Uploader Addon will attempt to create it. Synchronizing media files To keep media files in sync between a local Gramps installation and S3-hosted Gramps Web media files, the Gramps Web Sync Addon supports file synchronization via the Web API.","title":"Hosting media on S3"},{"location":"s3/#hosting-media-files-on-s3","text":"Instead of hosting the media files of the family tree on the same server as the Gramps database, they can also be hosted on Amazon S3 or a different API-compatible object storage service. This strongly reduces storage and traffic requirements for the Gramps Web server.","title":"Hosting media files on S3"},{"location":"s3/#preparing-credentials","text":"In your AWS (or other object storage service) account, get an access key ID and secret access key (you may first want to create a separate user with a security policy allowing only access to S3).","title":"Preparing credentials"},{"location":"s3/#upload-media-files","text":"To upload your existing media files to S3, on Linux you can use a local Gramps installation with the S3 Media Uploader Addon, that you can install directly from Gramps desktop. However, some additional configuration is necessary. The addon uses the boto3 Python library under the hood. You need to install it first with python3 -m pip install boto3 On the command line, export the access key ID and secret key to the appropriate environment variables: export AWS_ACCESS_KEY_ID = my_access_key_id export AWS_SECRET_ACCESS_KEY = my_secret_access_key Now, you can start the uploader by runing the following command, gramps -O \"My Family Tree\" -a tool \\ -p \"name=s3uploader,bucket_name=my_bucket_name\" replacing \"My Family Tree\" with the name of your family tree and my_bucket_name with the complete name of your S3 bucket. You will need a dedicated S3 bucket for your Gramps Web instance. If the bucket does not exist yet, the S3 Uploader Addon will attempt to create it.","title":"Upload media files"},{"location":"s3/#synchronizing-media-files","text":"To keep media files in sync between a local Gramps installation and S3-hosted Gramps Web media files, the Gramps Web Sync Addon supports file synchronization via the Web API.","title":"Synchronizing media files"},{"location":"dev-backend/","text":"Gramps Web backend development The backend of Gramps Web is called Gramps Web API . In fact it is more than just an app backend: it provides a RESTful API to read and modify a Gramps database. Gramps Web API is a Python application and is powered by the gramps library itself (which also powers the Gramps Desktop application). In this section of the docs, you can learn how to contribute to Gramps Web API development.","title":"Introduction"},{"location":"dev-backend/#gramps-web-backend-development","text":"The backend of Gramps Web is called Gramps Web API . In fact it is more than just an app backend: it provides a RESTful API to read and modify a Gramps database. Gramps Web API is a Python application and is powered by the gramps library itself (which also powers the Gramps Desktop application). In this section of the docs, you can learn how to contribute to Gramps Web API development.","title":"Gramps Web backend development"},{"location":"dev-backend/api/","text":"API specification The full API specification for the Gramps Web API can be found on Swagger .","title":"API specification"},{"location":"dev-backend/api/#api-specification","text":"The full API specification for the Gramps Web API can be found on Swagger .","title":"API specification"},{"location":"dev-backend/setup/","text":"This page lists the steps required to start developing Gramps Web API . It will be assumed that you are using Ubuntu Linux. Python version The Web API requires Python 3.7 or newer. Install Gramps The Web API requires the Gramps Python library to be importable. Starting from Gramps 5.2.0, it will be installable via pip . Right now, development is still based on Gramps 5.1.x, so the most convenient option is to install the Gramps apt package on Ubuntu sudo apt install python3-gramps Clone the Web API repository Clone the Web API to your PC with git clone git@github.com:gramps-project/gramps-webapi.git cd gramps-webapi Install prerequisites To start development, please install the dependencies by running pip3 install requirements-dev.txt Set up pre-commit hooks To set up the pre-commit hooks for the repository, run pre-commit install in the repository root. This will e.g. make sure that all source files are nicely formatted with black . Run tests To run the unit tests, run pytest in the repository root. Install the library in editable mode Run pip3 install -e . --user Generate a configuration file Example content: TREE = \"My Family Tree\" DISABLE_AUTH = True Warning Do not use this configuration in production. See Configuration for a full list of config options. Warning Do not use your production database for development, but use a copy of it or the Gramps example database. Run the app in development mode Run python3 -m gramps_webapi --config path/to/config run The API will be accesible at http://127.0.0.1:5000 by default. To choose a different port, add the --port option. Warning Do not expose this as-is to a public network or the internet, as anyone will be able to view and modify your family tree!","title":"Development setup"},{"location":"dev-backend/setup/#python-version","text":"The Web API requires Python 3.7 or newer.","title":"Python version"},{"location":"dev-backend/setup/#install-gramps","text":"The Web API requires the Gramps Python library to be importable. Starting from Gramps 5.2.0, it will be installable via pip . Right now, development is still based on Gramps 5.1.x, so the most convenient option is to install the Gramps apt package on Ubuntu sudo apt install python3-gramps","title":"Install Gramps"},{"location":"dev-backend/setup/#clone-the-web-api-repository","text":"Clone the Web API to your PC with git clone git@github.com:gramps-project/gramps-webapi.git cd gramps-webapi","title":"Clone the Web API repository"},{"location":"dev-backend/setup/#install-prerequisites","text":"To start development, please install the dependencies by running pip3 install requirements-dev.txt","title":"Install prerequisites"},{"location":"dev-backend/setup/#set-up-pre-commit-hooks","text":"To set up the pre-commit hooks for the repository, run pre-commit install in the repository root. This will e.g. make sure that all source files are nicely formatted with black .","title":"Set up pre-commit hooks"},{"location":"dev-backend/setup/#run-tests","text":"To run the unit tests, run pytest in the repository root.","title":"Run tests"},{"location":"dev-backend/setup/#install-the-library-in-editable-mode","text":"Run pip3 install -e . --user","title":"Install the library in editable mode"},{"location":"dev-backend/setup/#generate-a-configuration-file","text":"Example content: TREE = \"My Family Tree\" DISABLE_AUTH = True Warning Do not use this configuration in production. See Configuration for a full list of config options. Warning Do not use your production database for development, but use a copy of it or the Gramps example database.","title":"Generate a configuration file"},{"location":"dev-backend/setup/#run-the-app-in-development-mode","text":"Run python3 -m gramps_webapi --config path/to/config run The API will be accesible at http://127.0.0.1:5000 by default. To choose a different port, add the --port option. Warning Do not expose this as-is to a public network or the internet, as anyone will be able to view and modify your family tree!","title":"Run the app in development mode"},{"location":"dev-frontend/","text":"Gramps Web frontend development The Gramps Web frontend is called Gramps.js . It is written in Javascript and built using web components with Lit . This allows encapsulating functionality into reusable components. The frontend is designed as a progressive single-page web app with a mobile-first experience. It makes heavy use of Material Web Components for a Material Design look and feel.","title":"Introduction"},{"location":"dev-frontend/#gramps-web-frontend-development","text":"The Gramps Web frontend is called Gramps.js . It is written in Javascript and built using web components with Lit . This allows encapsulating functionality into reusable components. The frontend is designed as a progressive single-page web app with a mobile-first experience. It makes heavy use of Material Web Components for a Material Design look and feel.","title":"Gramps Web frontend development"},{"location":"dev-frontend/architecture/","text":"Architecture Components The frontend is built out of web components. They are defined in the Javascript files in the src directory. Typically, each file defines one component, starting with class GrampsjsSomeElement extends LitElement and ending with customElements . define ( 'grampsjs-some-element' , GrampsjsSomeElement ) ` that defines the new HTML element grampsjs-some-element that can be used elsewhere. The main entrypoint, included in index.html , is the gramps-js element defined in GrampsJs.js . This contains the definition of all individual pages (that correspond simply to elements that are shown or hidden based on the route/URL), the menu, and routing. The components in the src/views directory usually corresponds to full-page components that fetch data from the backend (e.g., the people list view), while components in src/components are usually smaller building blocks used inside the views that get their data from attributes provided by their parent element. However, this separation is not strict. Data flow Data is exchanged with the Backend/API via the apiGet , apiPut , and apiPost methods in src/api.js , which automatically take care of authentication. Data is passed from parent components to child components via properties (see e.g. the Lit documentation ). When data needs to be fed back from a child to a parent component, custom events are used that can be fired with the fireEvent function in src/api.js and listened to using Lit's @ syntax (docs) . Authentication The refresh token and authentication token are stored in the browser's local storage. Whenever an API call is made and the token is expired, the stored refresh token is used to fetch a new access token and the API call is repeated. The user's authorization scope, which is stored in the access token's claims, is obtained with the getPermissions function and used in the top-level GrampsJs element to set the boolean properties canAdd , canEdit , canManageUsers , which are flowed down to child elements to implement authorization-specific functionality.","title":"Architecture"},{"location":"dev-frontend/architecture/#architecture","text":"","title":"Architecture"},{"location":"dev-frontend/architecture/#components","text":"The frontend is built out of web components. They are defined in the Javascript files in the src directory. Typically, each file defines one component, starting with class GrampsjsSomeElement extends LitElement and ending with customElements . define ( 'grampsjs-some-element' , GrampsjsSomeElement ) ` that defines the new HTML element grampsjs-some-element that can be used elsewhere. The main entrypoint, included in index.html , is the gramps-js element defined in GrampsJs.js . This contains the definition of all individual pages (that correspond simply to elements that are shown or hidden based on the route/URL), the menu, and routing. The components in the src/views directory usually corresponds to full-page components that fetch data from the backend (e.g., the people list view), while components in src/components are usually smaller building blocks used inside the views that get their data from attributes provided by their parent element. However, this separation is not strict.","title":"Components"},{"location":"dev-frontend/architecture/#data-flow","text":"Data is exchanged with the Backend/API via the apiGet , apiPut , and apiPost methods in src/api.js , which automatically take care of authentication. Data is passed from parent components to child components via properties (see e.g. the Lit documentation ). When data needs to be fed back from a child to a parent component, custom events are used that can be fired with the fireEvent function in src/api.js and listened to using Lit's @ syntax (docs) .","title":"Data flow"},{"location":"dev-frontend/architecture/#authentication","text":"The refresh token and authentication token are stored in the browser's local storage. Whenever an API call is made and the token is expired, the stored refresh token is used to fetch a new access token and the API call is repeated. The user's authorization scope, which is stored in the access token's claims, is obtained with the getPermissions function and used in the top-level GrampsJs element to set the boolean properties canAdd , canEdit , canManageUsers , which are flowed down to child elements to implement authorization-specific functionality.","title":"Authentication"},{"location":"dev-frontend/build/","text":"To build the frontend for deployment, run npm run build","title":"Build"},{"location":"dev-frontend/setup/","text":"This page describes the steps needed to start with frontend development. It is assumed that you are using Ubuntu Linux. Install Node.js To get started, install Node.js with nvm : nvm install node Clone the repository Clone the Gramps.js repository git clone git@github.com:gramps-project/Gramps.js.git cd Gramps.js Install development dependencies To install all dependencies, run npm install at the repository's root. Start the backend To see Gramps Web live in action, you need a running Gramps Web API backend where the frontend can fetch its data from. If you have followed the setup steps for backend development , this can be achieved with a command like python3 -m gramps_webapi --config path/to/config run --port 5555 A backend at a different location can be used during development by changing the __APIHOST__ variable in api.js . Run the frontend in development mode You can now run the frontend with npm run start","title":"Development setup"},{"location":"dev-frontend/setup/#install-nodejs","text":"To get started, install Node.js with nvm : nvm install node","title":"Install Node.js"},{"location":"dev-frontend/setup/#clone-the-repository","text":"Clone the Gramps.js repository git clone git@github.com:gramps-project/Gramps.js.git cd Gramps.js","title":"Clone the repository"},{"location":"dev-frontend/setup/#install-development-dependencies","text":"To install all dependencies, run npm install at the repository's root.","title":"Install development dependencies"},{"location":"dev-frontend/setup/#start-the-backend","text":"To see Gramps Web live in action, you need a running Gramps Web API backend where the frontend can fetch its data from. If you have followed the setup steps for backend development , this can be achieved with a command like python3 -m gramps_webapi --config path/to/config run --port 5555 A backend at a different location can be used during development by changing the __APIHOST__ variable in api.js .","title":"Start the backend"},{"location":"dev-frontend/setup/#run-the-frontend-in-development-mode","text":"You can now run the frontend with npm run start","title":"Run the frontend in development mode"},{"location":"user-guide/","text":"This section contains the documentation for users of Gramps Web. Info The user documentation is still incomplete.","title":"Introduction"},{"location":"user-guide/first-login/","text":"When logging in to Gramps Web for the first time, a form will be displayed requiring the user to select a language for the frontend and a home person. This home person does not have to coincide with the home person in Gramps desktop \u2013 it is a personal setting for every user of Gramps Web. The home person is used e.g. for the initial view of the family tree. A typical choice would be for a user to select themselves as home person. To select a person as home person, start typing in the text field and a drop-down list with matches will appear. The language and home person settings are stored in the browser's local storage, so they will persist on a given device.","title":"First login"},{"location":"user-guide/registration/","text":"Anybody can register a new account at a Gramps Web instance, but it will need to be enabled manually by a site owner before it can be used to log in. Submit registration form The home page of Gramps Web, showing the login form, has a link \"Register new account\". Clicking on it will show a registration form with four mandatory fields: username, password, e-mail address, and full name. When all four fields have been filled, click \"submit\" to start the registration process. Confirm e-mail address After the form has been submitted, an automated e-mail will be sent to the e-mail address provided containing an e-mail confirmation link. Clicking it will open a confirmation page. If the confirmation e-mail does not arrive (and you have checked your Spam folder), it could be that e-mail has not been configured correctly by the Gramps Web server administrator. Enable account After the e-mail address has been confirmed, the Gramps Web administrator will receive an e-mail notification and can enable the new user account by going to the \"User administration\" section in settings page (accessible via the user icon in the top app bar) and changing the user role from \"disabled\" to any of the other roles . Note that the new user will not receive an automated notification that their account has been enabled, so it is advisible for the administrator to notify them personally.","title":"Registration"},{"location":"user-guide/registration/#submit-registration-form","text":"The home page of Gramps Web, showing the login form, has a link \"Register new account\". Clicking on it will show a registration form with four mandatory fields: username, password, e-mail address, and full name. When all four fields have been filled, click \"submit\" to start the registration process.","title":"Submit registration form"},{"location":"user-guide/registration/#confirm-e-mail-address","text":"After the form has been submitted, an automated e-mail will be sent to the e-mail address provided containing an e-mail confirmation link. Clicking it will open a confirmation page. If the confirmation e-mail does not arrive (and you have checked your Spam folder), it could be that e-mail has not been configured correctly by the Gramps Web server administrator.","title":"Confirm e-mail address"},{"location":"user-guide/registration/#enable-account","text":"After the e-mail address has been confirmed, the Gramps Web administrator will receive an e-mail notification and can enable the new user account by going to the \"User administration\" section in settings page (accessible via the user icon in the top app bar) and changing the user role from \"disabled\" to any of the other roles . Note that the new user will not receive an automated notification that their account has been enabled, so it is advisible for the administrator to notify them personally.","title":"Enable account"},{"location":"user-guide/sync/","text":"Synchronize Gramps Web and Gramps Desktop Gramps Web Sync is an addon for Gramps that allows to synchronize your Gramps database on your desktop computer with Gramps Web, including media files. Info Gramps Web Sync is still under development. Please use it carefully and create regular backups (in Gramps XML format) of your family tree. See this repository for the current development version of Gramps Web Sync. It will be available as an official Gramps addon soon.","title":"Synchronize with Gramps"},{"location":"user-guide/sync/#synchronize-gramps-web-and-gramps-desktop","text":"Gramps Web Sync is an addon for Gramps that allows to synchronize your Gramps database on your desktop computer with Gramps Web, including media files. Info Gramps Web Sync is still under development. Please use it carefully and create regular backups (in Gramps XML format) of your family tree. See this repository for the current development version of Gramps Web Sync. It will be available as an official Gramps addon soon.","title":"Synchronize Gramps Web and Gramps Desktop"}]}